#!/bin/sh
################################################################################
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
#  Copyright (C) 2012-2016
#    Michael D. Taht, Toke Høiland-Jørgensen, Sebastian Moeller
#  Copyright (C) 2016
#    Ron Angeles
#
################################################################################

egress() {

    CEIL=${UPLINK}
    PRIO_RATE=`expr $CEIL / 3` # Ceiling for prioirty
    BE_RATE=`expr $CEIL / 6`   # Min for best effort
    BK_RATE=`expr $CEIL / 6`   # Min for background
    BE_CEIL=`expr $CEIL - 16`  # A little slop at the top

    LQ="quantum `get_htb_quantum $IFACE $CEIL`"
    BURST="`get_htb_burst $IFACE $CEIL`"

    $TC qdisc del dev $IFACE root 2> /dev/null

    $TC qdisc add dev $IFACE root handle 1: `get_stab_string` htb default 12
    $TC class add dev $IFACE parent 1: classid 1:1 htb $LQ rate ${CEIL}kbit ceil ${CEIL}kbit $BURST `get_htb_adsll_string`
    $TC class add dev $IFACE parent 1:1 classid 1:10 htb $LQ rate ${CEIL}kbit ceil ${CEIL}kbit $BURST prio 0 `get_htb_adsll_string`
    $TC class add dev $IFACE parent 1:1 classid 1:11 htb $LQ rate 128kbit ceil ${PRIO_RATE}kbit prio 1 `get_htb_adsll_string`
    $TC class add dev $IFACE parent 1:1 classid 1:12 htb $LQ rate ${BE_RATE}kbit ceil ${BE_CEIL}kbit $BURST prio 2 `get_htb_adsll_string`
    $TC class add dev $IFACE parent 1:1 classid 1:13 htb $LQ rate ${BK_RATE}kbit ceil ${BE_CEIL}kbit $BURST prio 3 `get_htb_adsll_string`

    $TC qdisc add dev $IFACE parent 1:11 handle 110: $QDISC \
        `get_limit ${ELIMIT}` `get_target "${ETARGET}" ${UPLINK}` `get_ecn ${EECN}` `get_quantum 300` `get_flows ${PRIO_RATE}` ${EQDISC_OPTS}
    $TC qdisc add dev $IFACE parent 1:12 handle 120: $QDISC \
        `get_limit ${ELIMIT}` `get_target "${ETARGET}" ${UPLINK}` `get_ecn ${EECN}` `get_quantum 300` `get_flows ${BE_RATE}` ${EQDISC_OPTS}
    $TC qdisc add dev $IFACE parent 1:13 handle 130: $QDISC \
        `get_limit ${ELIMIT}` `get_target "${ETARGET}" ${UPLINK}` `get_ecn ${EECN}` `get_quantum 300` `get_flows ${BK_RATE}` ${EQDISC_OPTS}

    # Need a catchall rule

    $TC filter add dev $IFACE parent 1:0 protocol all prio 999 u32 \
        match u32 0 0 flowid 1:12

    # FIXME should probably change the filter here to do pre-nat

    $TC filter add dev $IFACE parent 1:0 protocol ip prio 101 handle 1/${IPT_MASK} fw classid 1:11
    $TC filter add dev $IFACE parent 1:0 protocol ip prio 102 handle 2/${IPT_MASK} fw classid 1:12
    $TC filter add dev $IFACE parent 1:0 protocol ip prio 103 handle 3/${IPT_MASK} fw classid 1:13

    # ipv6 support. Note that the handle indicates the fw mark bucket that is looked for

    $TC filter add dev $IFACE parent 1:0 protocol ipv6 prio 201 handle 1/${IPT_MASK} fw classid 1:11
    $TC filter add dev $IFACE parent 1:0 protocol ipv6 prio 202 handle 2/${IPT_MASK} fw classid 1:12
    $TC filter add dev $IFACE parent 1:0 protocol ipv6 prio 203 handle 3/${IPT_MASK} fw classid 1:13

    # Arp traffic

    $TC filter add dev $IFACE parent 1:0 protocol arp prio 7 \
        u32 match u32 0 0 flowid 1:11

    # ICMP traffic - Don't impress your friends. Deoptimize to manage ping floods
    # better instead

    $TC filter add dev $IFACE parent 1:0 protocol ip prio 8 \
        u32 match ip protocol 1 0xff flowid 1:13

    $TC filter add dev $IFACE parent 1:0 protocol ipv6 prio 9 \
        u32 match ip protocol 58 0xff flowid 1:13
}


ingress() {

    CEIL=$DOWNLINK
    PRIO_RATE=`expr $CEIL / 3` # Ceiling for prioirty
    BE_RATE=`expr $CEIL / 6`   # Min for best effort
    BK_RATE=`expr $CEIL / 6`   # Min for background
    BE_CEIL=`expr $CEIL - 16`  # A little slop at the top

    LQ="quantum `get_htb_quantum $IFACE $CEIL`"
    BURST="`get_htb_burst $IFACE $CEIL`"

    $TC qdisc del dev $IFACE handle ffff: ingress 2> /dev/null
    $TC qdisc add dev $IFACE handle ffff: ingress

    $TC qdisc del dev $DEV root  2> /dev/null

    $TC qdisc add dev $DEV root handle 1: `get_stab_string` htb default 12
    $TC class add dev $DEV parent 1: classid 1:1 htb $LQ rate ${CEIL}kbit ceil ${CEIL}kbit $BURST `get_htb_adsll_string`
    $TC class add dev $DEV parent 1:1 classid 1:10 htb $LQ rate ${CEIL}kbit ceil ${CEIL}kbit $BURST prio 0 `get_htb_adsll_string`
    $TC class add dev $DEV parent 1:1 classid 1:11 htb $LQ rate 32kbit ceil ${PRIO_RATE}kbit prio 1 `get_htb_adsll_string`
    $TC class add dev $DEV parent 1:1 classid 1:12 htb $LQ rate ${BE_RATE}kbit ceil ${BE_CEIL}kbit $BURST prio 2 `get_htb_adsll_string`
    $TC class add dev $DEV parent 1:1 classid 1:13 htb $LQ rate ${BK_RATE}kbit ceil ${BE_CEIL}kbit $BURST prio 3 `get_htb_adsll_string`

    $TC qdisc add dev $DEV parent 1:11 handle 110: $QDISC \
        `get_limit ${ILIMIT}` `get_target "${ITARGET}" ${DOWNLINK}` `get_ecn ${IECN}` `get_quantum 500` `get_flows ${PRIO_RATE}` ${IQDISC_OPTS}
    $TC qdisc add dev $DEV parent 1:12 handle 120: $QDISC \
        `get_limit ${ILIMIT}` `get_target "${ITARGET}" ${DOWNLINK}` `get_ecn ${IECN}` `get_quantum 1500` `get_flows ${BE_RATE}` ${IQDISC_OPTS}
    $TC qdisc add dev $DEV parent 1:13 handle 130: $QDISC \
        `get_limit ${ILIMIT}` `get_target "${ITARGET}" ${DOWNLINK}` `get_ecn ${IECN}` `get_quantum 300` `get_flows ${BK_RATE}` ${IQDISC_OPTS}

    # Need a catchall rule

    $TC filter add dev $DEV parent 1:0 protocol all prio 999 u32 \
        match u32 0 0 flowid 1:12

    # ipv4

    $TC filter add dev $DEV parent 1:0 protocol ip prio 101 handle 1/${IPT_MASK} fw classid 1:11
    $TC filter add dev $DEV parent 1:0 protocol ip prio 102 handle 2/${IPT_MASK} fw classid 1:12
    $TC filter add dev $DEV parent 1:0 protocol ip prio 103 handle 3/${IPT_MASK} fw classid 1:13

    # ipv6

    $TC filter add dev $DEV parent 1:0 protocol ipv6 prio 201 handle 1/${IPT_MASK} fw classid 1:11
    $TC filter add dev $DEV parent 1:0 protocol ipv6 prio 202 handle 2/${IPT_MASK} fw classid 1:12
    $TC filter add dev $DEV parent 1:0 protocol ipv6 prio 203 handle 3/${IPT_MASK} fw classid 1:13

    # Arp traffic

    $TC filter add dev $DEV parent 1:0 protocol arp prio 7 \
        u32 match u32 0 0 flowid 1:11

    # ICMP traffic - Don't impress your friends. Deoptimize to manage ping floods
    # better instead

    $TC filter add dev $DEV parent 1:0 protocol ip prio 8 \
        u32 match ip protocol 1 0xff flowid 1:13

    $TC filter add dev $DEV parent 1:0 protocol ipv6 prio 9 \
        u32 match ip protocol 58 0xff flowid 1:13

    $IP link set dev $DEV up

    # redirect all IP packets arriving in $IFACE to $DEV

    $TC filter add dev $IFACE parent ffff: protocol all prio 10 u32 \
        match u32 0 0 flowid 1:1 action connmark action mirred egress redirect dev $DEV

}

sqm_start() {
    [ -n "$IFACE" ] || return 1
    do_modules
    verify_qdisc "htb" || return 1
    verify_qdisc $QDISC || return 1
    sqm_debug "Starting ${SCRIPT}"

    [ -z "$DEV" ] && DEV=$( get_ifb_for_if ${IFACE} )

    if [ "$UPLINK" -ne 0 ]; then
        egress
        sqm_debug "egress shaping activated"
    else
        sqm_debug "egress shaping deactivated"
        $TC qdisc del dev $IFACE root 2> /dev/null
    fi

    if [ "$DOWNLINK" -ne 0 ]; then
        verify_qdisc ingress "ingress" || return 1
        ingress
        sqm_debug "ingress shaping activated"
    else
        sqm_debug "ingress shaping deactivated"
        $TC qdisc del dev $DEV root 2> /dev/null
        $TC qdisc del dev $IFACE ingress 2> /dev/null
    fi


    return 0
}

sqm_stop() {
    $TC qdisc del dev $IFACE ingress
    $TC qdisc del dev $IFACE root
    $TC qdisc del dev $DEV root

    return 0
}
